import { fetchUser, fetchTypeCard } from './utils/fetch.js'
import { parseTmpl } from './utils/parseTmpl.js'
import { tmpl } from './tmpl.js'

const inputs = document.querySelectorAll('input')
const form = document.querySelector('.form-payment')
const cardContainer = document.querySelector('.card-container')

const number = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ' ']

let isUser = false

let user = {
  cardNumber: '',
  name: '',
  experitionDate: new Date(),
  typeId: 0,
  typeOfCard: '',
}

let values = {
  cardNumber: '',
  name: '',
  experitionDate: new Date(),
  cvv: '',
}

const toUpperCaseFormatter = (str) => {
  return str.toUpperCase()
}

const valueWithSpace = (str, data) => {
  let numberValue = true
  str &&
    [...str].forEach((el) => {
      if (!number.includes(el)) {
        return (numberValue = false)
      }
    })

  if (numberValue === false) {
    alert('only digits !')
    return str.substring(0, str.length - 1)
  }

  let newStr = ''
  if (str.length > 19) {
    alert('too many digits !')
    return str.substring(0, str.length - 1)
  }

  if (
    (str.length === 4 && data) ||
    (str.length === 9 && data) ||
    (str.length === 14 && data)
  ) {
    newStr += str + ' '
  } else {
    newStr += str
  }
  return newStr
}

const createCardContainer = (tpl) => {
  cardContainer.insertAdjacentHTML('beforeend', tpl)
}

const createNoUserCard = () => {
  cardContainer.insertAdjacentHTML(
    'beforeend',
    '<div style="color:red">Such an user doesnt exists !</div>'
  )
}

const addTypeofCard = (typeOfCard) => {
  cardContainer.insertAdjacentHTML(
    'beforeend',
    `<div class='svg-container'>
    ${
      typeOfCard === 'Visa'
        ? `
          <svg xmlns="http://www.w3.org/2000/svg" width="150" height="150" viewBox="0 0 192.756 192.756"><g fill-rule="evenodd" clip-rule="evenodd"><path fill="#000" d="M0 0h192.756v192.756H0V0z"/><path d="M21.234 147.705c35.876-15.375 86.215-29.311 152.885-15.357l.699-16.91c-70.34-7.68-120.812 14.723-153.584 30.6v1.667z" fill="#e7a83a"/><path fill="#1d5b99" d="M58.75 103.115l15.549-51.269h13.874l-15.55 51.269H58.75zM52.548 51.86l-12.48 21.733c-3.177 5.692-5.034 8.567-5.927 12.164h-.19c.221-4.56-.415-10.158-.475-13.322L32.098 51.86H8.744l-.24 1.379c6 0 9.558 3.014 10.537 9.179l4.552 40.697h14.373L67.028 51.86h-14.48zM160.439 103.115l-.383-7.625-17.324-.014-3.543 7.638h-15.062l27.311-51.171h18.488l4.625 51.171h-14.112v.001zm-1.591-30.242c-.154-3.789-.283-8.932-.025-12.044h-.205c-.844 2.545-4.471 10.188-6.066 13.947l-5.162 11.238h12.164l-.706-13.141zM102.738 104.572c-9.795 0-16.295-3.107-20.936-5.877l6.609-10.093c4.166 2.33 7.437 5.019 14.963 5.019 2.42 0 4.752-.629 6.076-2.922 1.93-3.335-.445-5.129-5.865-8.197l-2.676-1.74c-8.034-5.49-11.509-10.704-7.727-19.806 2.42-5.822 8.803-10.235 19.333-10.235 7.262 0 14.07 3.141 18.037 6.21l-7.598 8.911c-3.871-3.131-7.08-4.715-10.752-4.715-2.928 0-5.152 1.129-5.92 2.652-1.445 2.863.467 4.815 4.689 7.436l3.182 2.024c9.754 6.152 12.078 12.603 9.633 18.634-4.204 10.381-12.436 12.699-21.048 12.699zM178.346 59.776h-.914v-5.558h2.109c1.342 0 2.027.47 2.027 1.598 0 1.006-.619 1.422-1.451 1.516l1.557 2.444h-1.033l-1.436-2.376h-.859v2.376zm1.019-3.155c.686 0 1.289-.067 1.289-.873 0-.671-.658-.752-1.207-.752h-1.102v1.625h1.02zm-.027 5.303c-2.885 0-4.939-2.161-4.939-5.021 0-3.021 2.281-5.021 4.939-5.021 2.633 0 4.914 2 4.914 5.021 0 3.02-2.281 5.021-4.914 5.021zm0-9.169c-2.174 0-3.865 1.704-3.865 4.148 0 2.282 1.477 4.148 3.865 4.148 2.148 0 3.84-1.691 3.84-4.148 0-2.444-1.692-4.148-3.84-4.148z"/></g></svg>
    `
        : `
<svg xmlns="http://www.w3.org/2000/svg" width="150" height="150" viewBox="0 0 192.756 192.756"><g fill-rule="evenodd" clip-rule="evenodd"><path fill="#000" d="M0 0h192.756v192.756H0V0z"/><path d="M96.42 133.041c8.667 7.986 20.306 12.83 32.966 12.83 27.189 0 49.195-22.176 49.195-49.451 0-27.358-22.006-49.535-49.195-49.535-12.66 0-24.299 4.843-32.966 12.83-9.941 9.091-16.229 22.176-16.229 36.705.001 14.529 6.288 27.615 16.229 36.621z" fill="#e9b040"/><path d="M172.041 123.949c0-.85.68-1.529 1.529-1.529.934 0 1.613.68 1.613 1.529 0 .936-.68 1.615-1.613 1.615-.849 0-1.529-.679-1.529-1.615zm1.529 1.276c.68 0 1.273-.596 1.273-1.275s-.594-1.189-1.273-1.189c-.596 0-1.189.51-1.189 1.189s.594 1.275 1.189 1.275zm-.17-.51h-.34v-1.445h.594c.086 0 .256 0 .34.086.17.084.17.17.17.34s-.084.34-.254.34l.34.68h-.426l-.17-.596h-.254v.595-.85h.34c.084 0 .084-.086.084-.17 0-.086 0-.086-.084-.17h-.34v1.19z" fill="#e9b040"/><path d="M112.309 91.153c-.17-1.784-.51-3.483-.85-5.268H81.381c.34-1.784.85-3.483 1.359-5.183h27.275a56.916 56.916 0 0 0-2.039-5.268H84.865a62.38 62.38 0 0 1 2.804-5.268h17.419a44.706 44.706 0 0 0-3.738-5.183h-9.942a48.87 48.87 0 0 1 5.013-5.268c-8.751-7.902-20.307-12.83-33.052-12.83-27.104 0-49.195 22.177-49.195 49.535 0 27.275 22.091 49.451 49.195 49.451 12.745 0 24.3-4.844 33.052-12.83a47.105 47.105 0 0 0 4.929-5.184h-9.942c-1.36-1.699-2.549-3.398-3.739-5.268h17.419a39.517 39.517 0 0 0 2.889-5.268H84.865c-.765-1.699-1.529-3.398-2.125-5.184h27.275c.594-1.699 1.02-3.482 1.443-5.268.34-1.699.68-3.482.85-5.268a51.61 51.61 0 0 0 .256-5.184c0-1.781-.085-3.565-.255-5.264z" fill="#cc2131"/><path d="M172.041 107.891c0-.934.68-1.613 1.529-1.613.934 0 1.613.68 1.613 1.613 0 .85-.68 1.615-1.613 1.615-.849 0-1.529-.766-1.529-1.615zm1.529 1.189c.68 0 1.273-.51 1.273-1.189s-.594-1.189-1.273-1.189c-.596 0-1.189.51-1.189 1.189s.594 1.189 1.189 1.189zm-.17-.51h-.34v-1.359H173.994c.17.086.17.256.17.426 0 .084-.084.254-.254.34l.34.594h-.426l-.17-.51h-.254v.509-.764h.17c.084 0 .17 0 .17-.086.084 0 .084-.084.084-.17 0 0 0-.084-.084-.084 0-.086-.086 0-.17 0h-.17v1.104z" fill="#fff"/><path d="M79.682 110.695c-1.614.424-2.804.68-3.993.68-2.549 0-4.079-1.615-4.079-4.504 0-.594.085-1.189.17-1.869l.34-1.953.255-1.615L74.669 87.5h5.098l-.595 3.059h3.229l-.765 5.098h-3.229l-1.359 8.326c-.085.426-.085.68-.085.85 0 1.105.51 1.529 1.784 1.529.595 0 1.104-.084 1.614-.17l-.679 4.503zM96.166 110.525c-1.869.51-3.568.764-5.438.764-5.778 0-9.092-3.059-9.092-9.09 0-7.053 3.909-12.151 9.346-12.151 4.333 0 7.137 2.889 7.137 7.391 0 1.531-.17 2.975-.594 5.014H86.904c-.085.34-.085.51-.085.68 0 2.379 1.614 3.568 4.673 3.568 1.954 0 3.653-.424 5.523-1.273l-.849 5.097zm-3.144-12.15v-1.02c0-1.699-.935-2.634-2.549-2.634-1.7 0-2.889 1.274-3.399 3.653h5.948v.001zM38.898 110.949H33.63l3.059-19.286-6.882 19.286h-3.653l-.425-19.201-3.229 19.201h-5.183l4.163-25.064h7.732l.17 15.465 5.183-15.465h8.497l-4.164 25.064zM51.729 101.859c-.51-.086-.68-.086-1.02-.086-3.059 0-4.588 1.189-4.588 3.059 0 1.275.765 2.125 1.954 2.125 2.549 0 3.568-2.125 3.654-5.098zm4.248 9.09h-4.588l.085-2.123c-1.19 1.613-2.804 2.463-5.608 2.463-2.549 0-4.758-2.293-4.758-5.607 0-.934.17-1.783.425-2.633.849-3.145 3.993-5.098 8.836-5.184.595 0 1.529 0 2.379.086.169-.68.169-.936.169-1.36 0-1.36-1.104-1.785-3.568-1.785-1.529 0-3.229.255-4.418.68l-.765.17-.34.084.765-4.588c2.464-.765 4.248-1.104 6.203-1.104 4.588 0 7.052 2.124 7.052 6.032 0 1.02.085 1.785-.255 3.994l-1.189 7.307-.17 1.275-.085 1.02-.085.68-.085.593zM121.826 90.728c1.529 0 2.889.425 4.758 1.359l.934-5.438c-.51-.255-.68-.255-1.359-.51l-2.123-.595c-.68-.17-1.529-.255-2.465-.255-2.635 0-4.164.085-5.777 1.02-.85.595-1.955 1.36-3.145 2.719l-.68-.17-5.438 3.823.256-2.124h-5.609l-3.312 20.391h5.354l1.953-10.959s.766-1.531 1.105-2.039c1.02-1.275 1.869-1.275 2.973-1.275h.426a27.428 27.428 0 0 0-.256 3.908c0 6.627 3.738 10.791 9.516 10.791 1.445 0 2.721-.17 4.674-.68l.936-5.777c-1.699.934-3.229 1.359-4.504 1.359-3.143 0-5.014-2.379-5.014-6.117-.002-5.523 2.803-9.431 6.797-9.431zM166.941 85.885l-1.188 7.137c-1.275-1.954-2.805-2.889-4.844-2.889-2.805 0-5.438 1.614-7.053 4.673v-.084l-3.398-2.04.34-2.124h-5.693l-3.229 20.391h5.268l1.785-10.959s1.359-1.531 1.699-2.039c.85-1.02 1.699-1.191 2.379-1.275-.594 1.699-.934 3.738-.934 6.033 0 5.098 2.633 8.496 6.541 8.496 1.955 0 3.484-.68 4.928-2.295l-.254 2.039h5.014l4.078-25.064h-5.439zm-6.541 20.222c-1.785 0-2.719-1.359-2.719-3.994 0-3.994 1.699-6.882 4.162-6.882 1.869 0 2.805 1.445 2.805 3.994 0 4.078-1.699 6.882-4.248 6.882zM135.846 101.859c-.51-.086-.68-.086-1.02-.086-3.061 0-4.59 1.189-4.59 3.059 0 1.275.766 2.125 1.955 2.125 2.549 0 3.569-2.125 3.655-5.098zm4.248 9.09h-4.674l.17-2.123c-1.189 1.613-2.805 2.463-5.607 2.463-2.635 0-4.928-2.209-4.928-5.607 0-4.842 3.652-7.816 9.43-7.816.596 0 1.529 0 2.295.086.17-.68.256-.936.256-1.36 0-1.36-1.105-1.785-3.654-1.785-1.445 0-3.229.255-4.418.68l-.68.17-.34.084.764-4.588c2.465-.765 4.25-1.104 6.203-1.104 4.588 0 6.967 2.124 6.967 6.032 0 1.02.17 1.785-.254 3.994l-1.105 7.307-.17 1.275-.17 1.02-.084.68v.592h-.001zM67.107 94.891c1.02 0 2.464.085 3.994.34l.765-4.758c-1.53-.17-3.569-.425-4.759-.425-5.947 0-7.901 3.229-7.901 6.967 0 2.465 1.104 4.248 3.993 5.607 2.124 1.02 2.464 1.189 2.464 2.125 0 1.273-1.104 2.039-3.144 2.039-1.614 0-3.144-.256-4.843-.85l-.595 4.672.084.086 1.02.17c.34.084.765.17 1.36.254 1.274.086 2.379.17 3.059.17 5.948 0 8.412-2.293 8.412-6.797 0-2.803-1.36-4.502-3.994-5.691-2.294-1.021-2.549-1.189-2.549-2.125 0-.934 1.02-1.784 2.634-1.784z" fill="#1b3771"/><path d="M128.963 85.035l-.936 5.438c-1.869-.935-3.229-1.359-4.758-1.359-3.994 0-6.797 3.908-6.797 9.431 0 3.824 1.869 6.117 5.014 6.117 1.273 0 2.803-.424 4.502-1.273l-.934 5.691c-1.955.51-3.229.766-4.674.766-5.777 0-9.346-4.164-9.346-10.875 0-8.922 4.928-15.21 11.98-15.21.934 0 1.783.085 2.463.255l2.125.51c.681.255.851.34 1.361.509zM111.799 88.774h-.51c-1.783 0-2.803.85-4.418 3.313l.51-3.144h-4.844l-3.312 20.392h5.354c1.953-12.49 2.463-14.614 5.012-14.614h.34c.51-2.464 1.189-4.249 2.039-5.863l-.171-.084zM81.042 109.08c-1.444.51-2.634.68-3.823.68-2.719 0-4.249-1.529-4.249-4.502 0-.51.085-1.189.17-1.785l.34-2.039.255-1.613 2.294-13.936h5.268l-.595 3.059h2.719l-.68 5.013h-2.719l-1.444 8.497c-.085.34-.085.596-.085.85 0 1.02.51 1.445 1.784 1.445.595 0 1.104 0 1.444-.17l-.679 4.501zM60.565 95.401c0 2.55 1.189 4.333 3.993 5.693 2.209 1.02 2.549 1.359 2.549 2.209 0 1.275-.935 1.869-3.059 1.869-1.614 0-3.059-.254-4.758-.764l-.765 4.672.255.086.935.17c.339.084.765.17 1.444.17 1.189.17 2.209.17 2.889.17 5.607 0 8.242-2.125 8.242-6.797 0-2.805-1.104-4.42-3.738-5.693-2.294-1.02-2.549-1.274-2.549-2.209 0-1.104.935-1.614 2.634-1.614 1.02 0 2.464.085 3.824.255l.764-4.673c-1.359-.255-3.483-.425-4.673-.425-5.948-.001-8.072 3.143-7.987 6.881zM169.662 109.336h-5.014l.256-1.955c-1.445 1.529-2.975 2.209-4.93 2.209-3.908 0-6.457-3.312-6.457-8.41 0-6.798 3.994-12.576 8.666-12.576 2.125 0 3.654.935 5.1 2.804l1.189-7.137h5.268l-4.078 25.065zm-7.818-4.758c2.465 0 4.164-2.889 4.164-6.883 0-2.634-.936-3.994-2.805-3.994-2.379 0-4.162 2.804-4.162 6.798 0 2.72.934 4.079 2.803 4.079zM97.355 108.91c-1.87.596-3.569.85-5.523.85-5.948 0-9.007-3.143-9.007-9.176 0-6.967 3.909-12.15 9.262-12.15 4.418 0 7.221 2.889 7.221 7.392 0 1.53-.17 2.975-.68 5.098H88.094c-.085.256-.085.426-.085.596 0 2.379 1.615 3.568 4.673 3.568 1.954 0 3.653-.34 5.523-1.275l-.85 5.097zm-2.974-12.15v-1.019c0-1.699-.935-2.634-2.549-2.634-1.699 0-2.889 1.275-3.399 3.653h5.948zM40.258 109.336H34.99l3.059-19.288-6.882 19.288h-3.654l-.425-19.118-3.228 19.118h-4.928l4.163-25.065h7.647l.255 15.549 5.097-15.549h8.327l-4.163 25.065zM53.428 100.244c-.51 0-.765-.084-1.19-.084-2.974 0-4.503 1.104-4.503 3.143 0 1.275.68 2.039 1.869 2.039 2.209 0 3.739-2.039 3.824-5.098zm3.908 9.092h-4.419l.085-2.125c-1.36 1.699-3.144 2.465-5.608 2.465-2.889 0-4.843-2.209-4.843-5.523 0-5.012 3.398-7.901 9.346-7.901.595 0 1.36.085 2.209.169.17-.679.17-.934.17-1.274 0-1.359-.935-1.869-3.399-1.869-1.529 0-3.229.17-4.418.51l-.765.255-.51.085.765-4.588c2.634-.765 4.418-1.02 6.373-1.02 4.588 0 7.052 2.039 7.052 5.947 0 1.02-.085 1.785-.425 4.079l-1.19 7.223-.17 1.273-.085 1.02-.085.766-.083.508zM137.545 100.244c-.596 0-.85-.084-1.189-.084-3.059 0-4.59 1.104-4.59 3.143 0 1.275.766 2.039 1.955 2.039 2.125 0 3.738-2.039 3.824-5.098zm3.908 9.092h-4.418l.084-2.125c-1.359 1.699-3.143 2.465-5.607 2.465-2.889 0-4.844-2.209-4.844-5.523 0-5.012 3.398-7.901 9.346-7.901.596 0 1.361.085 2.125.169.17-.679.256-.934.256-1.274 0-1.359-.936-1.869-3.398-1.869-1.531 0-3.314.17-4.504.51l-.68.255-.51.085.764-4.588c2.635-.765 4.418-1.02 6.373-1.02 4.588 0 6.967 2.039 6.967 5.947 0 1.02 0 1.785-.424 4.079l-1.105 7.223-.17 1.273-.17 1.02-.084.766v.508h-.001zM155.727 88.774h-.51c-1.783 0-2.803.85-4.418 3.313l.51-3.144h-4.844l-3.229 20.392h5.268c1.955-12.49 2.465-14.614 5.014-14.614h.34c.51-2.464 1.189-4.249 2.039-5.863l-.17-.084z" fill="#fff"/></g></svg>
              `
    }
    </div>`
  )
}

const clearCardContainer = () => {
  cardContainer.innerHTML = ' '
}

const onInputChange = (e) => {
  values = { ...values, [e.target.name]: e.target.value }
  // console.log(values)
  switch (e.target.name) {
    case 'name':
      const newValue = toUpperCaseFormatter(e.target.value)
      values = { ...values, [e.target.name]: newValue }
      e.target.value = newValue
      break
    case 'cardNumber':
      let newCardNumber = valueWithSpace(e.target.value, e.data)
      values = {
        ...values,
        [e.target.name]: newCardNumber,
      }
      e.target.value = newCardNumber
      break
    case 'experitionDate':
      const date = new Date(e.target.value)
      values = { ...values, [e.target.name]: e.target.value }
      break

    case 'cvv':
      values = { ...values, [e.target.name]: e.target.value }
      break

    default:
      values = { ...values, [e.target.name]: e.target.value }
  }
}

//------------------------------------- Validator handlers ---------------------//

const isEmpty = (value) => !!value
const strictNumber = (value, strictNumber) => value.length === strictNumber
const checkDateEntrance = (date) => {
  const today = new Date()
  const cardDate = new Date(date).getTime()
  const sixMonth = new Date(today.setMonth(today.getMonth() + 6)).getTime()
  return cardDate >= sixMonth
}

const validators = {
  name: [
    {
      rule: isEmpty,
      massage: 'Sory card name field shoud not be emty',
    },
  ],
  cardNumber: [
    {
      rule: isEmpty,
      message: 'Sory card number field shoud not be emty',
    },
    {
      rule: () => strictNumber(values.cardNumber, 19),
      message: 'Card number should contain 16 digits',
    },
  ],
  experitionDate: [
    {
      rule: isEmpty,
      message: 'Sory card field date shoud not be emty',
    },
    {
      rule: () => checkDateEntrance(values.experitionDate),
      message: 'Sory date in 6 month',
    },
  ],
  cvv: [
    {
      rule: isEmpty,
      message: 'Sory card cvv field shoud not be emty',
    },
    {
      rule: () => strictNumber(values.cvv, 3),
      message: 'Card number should contain 3 digits',
    },
  ],
}

const onSubmit = (e) => {
  e.preventDefault()
  console.log(values)
  let validate = Object.keys(values).reduce((acc, fieldKey) => {
    const fieldValue = values[fieldKey]
    const isValidRules =
      validators[fieldKey] &&
      validators[fieldKey].reduce((acc, validator) => {
        if (!validator.rule(fieldValue)) {
          return [...acc, validator]
        } else {
          return acc
        }
      }, [])

    if (isValidRules && isValidRules.length) {
      return [...acc, ...isValidRules]
    } else {
      return acc
    }
  }, [])
  console.log(validate)
  if (!validate.length) {
    fetchUser()
      .then((data) => isUserInBase(data))
      .catch((err) => console.log(err))
  } else {
    validate.map((el) => alert(el.message))
  }

  // console.log(values)

//------------------------------------- Parse template ---------------------//

  const typeOfCard = (data) => {
    const typeCard = data.find((el) => el.id === user.typeId)
    console.log(typeCard.card)
    user = {
      ...user,
      experitionDate: values.experitionDate,
      typeOfCard: typeCard.card,
    }
    console.log('user in fetch', user)
    clearCardContainer()
    createCardContainer(parseTmpl(tmpl, values))
    addTypeofCard(typeCard.card)
  }

  const isUserInBase = (data) => {
    const usersCardName = data.map((el) => el.name.toUpperCase())
    const usersCardNumber = data.map((el) => el.cardNumber)

    const userIndexNumber = usersCardNumber.indexOf(
      values.cardNumber.split(' ').join('')
    )
    const userIndexName = usersCardName.indexOf(values.name)

    if (
      userIndexNumber !== -1 &&
      userIndexName !== -1 &&
      userIndexNumber === userIndexName
    ) {
      isUser = true
      user = { ...data[userIndexName] }
      console.log(user)
      console.log('user exists')
    } else {
      console.log('such user doesnt exists')
      clearCardContainer()
      createNoUserCard()
      isUser = false
    }

    console.log(isUser)
    if (isUser) {
      fetchTypeCard()
        .then((data) => typeOfCard(data))
        .catch((err) => console.log(err))
    }
  }
}

form.addEventListener('submit', onSubmit)

inputs.forEach((el) => el.addEventListener('input', onInputChange))
